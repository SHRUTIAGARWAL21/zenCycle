"use client";
import { useEffect, useState } from "react";

type MoodStat = {
  mood: string;
  percentage: number;
  reason?: string;
};

type WeeklySummaryData = {
  thisWeek: MoodStat[];
  lastWeek: MoodStat[];
};

const moodEmojiMap: Record<string, string> = {
  happy: "üòÑ",
  sad: "üò¢",
  angry: "üò°",
  anxious: "üò∞",
  depressed: "üòû",
  neutral: "üòê",
};

const moodColorMap: Record<string, string> = {
  happy: "text-emerald-600",
  sad: "text-blue-600",
  angry: "text-red-600",
  anxious: "text-purple-600",
  depressed: "text-gray-600",
  neutral: "text-slate-600",
};

const moodBgMap: Record<string, string> = {
  happy: "bg-emerald-50 border-emerald-200",
  sad: "bg-blue-50 border-blue-200",
  angry: "bg-red-50 border-red-200",
  anxious: "bg-purple-50 border-purple-200",
  depressed: "bg-gray-50 border-gray-200",
  neutral: "bg-slate-50 border-slate-200",
};

export default function WeeklySummary() {
  const [summary, setSummary] = useState<WeeklySummaryData | null>(null);
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  useEffect(() => {
    if (!mounted) return;

    fetch("/api/moods/weekly-summary", { credentials: "include" })
      .then((res) => res.json())
      .then(setSummary)
      .catch((err) => console.error("Failed to fetch summary", err));
  }, [mounted]);

  if (!mounted || !summary) {
    return (
      <div className="animate-pulse space-y-4">
        <div className="h-6 bg-gray-200 rounded-lg w-3/4"></div>
        <div className="space-y-3">
          {[...Array(4)].map((_, i) => (
            <div key={i} className="flex items-center gap-3">
              <div className="w-8 h-8 bg-gray-200 rounded-lg"></div>
              <div className="flex-1">
                <div className="h-4 bg-gray-200 rounded w-1/2 mb-2"></div>
                <div className="h-3 bg-gray-200 rounded w-3/4"></div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  // Helper function to get mood percentage
  const getMoodPercentage = (moods: MoodStat[], moodType: string) => {
    const mood = moods.find((m) => m.mood === moodType);
    return mood ? mood.percentage : 0;
  };

  // Helper function to get mood reason
  const getMoodReason = (moods: MoodStat[], moodType: string) => {
    const mood = moods.find((m) => m.mood === moodType);
    return mood?.reason || "";
  };

  // Generate comparison insights
  const getComparisonInsights = () => {
    const insights = [];
    const moodTypes = [
      "happy",
      "sad",
      "angry",
      "anxious",
      "depressed",
      "neutral",
    ];

    for (const moodType of moodTypes) {
      const thisWeekPercent = getMoodPercentage(summary.thisWeek, moodType);
      const lastWeekPercent = getMoodPercentage(summary.lastWeek, moodType);
      const difference = thisWeekPercent - lastWeekPercent;

      if (difference > 0) {
        const reason = getMoodReason(summary.thisWeek, moodType);
        insights.push({
          mood: moodType,
          change: difference,
          direction: "increased",
          reason: reason,
          isPositive: moodType === "happy" || moodType === "neutral",
        });
      } else if (difference < 0) {
        // Only show reason for negative mood decreases (which is good)
        const isGoodChange = moodType !== "happy" && moodType !== "neutral";
        insights.push({
          mood: moodType,
          change: Math.abs(difference),
          direction: "decreased",
          reason: isGoodChange ? getMoodReason(summary.lastWeek, moodType) : "",
          isPositive: isGoodChange,
        });
      }
    }

    return insights.filter((insight) => insight.change > 0);
  };

  // No data scenarios
  if (summary.thisWeek.length === 0 && summary.lastWeek.length === 0) {
    return (
      <div className="text-center py-8">
        <div className="text-6xl mb-4">üåü</div>
        <h3 className="text-xl font-bold text-gray-800 mb-3">
          Welcome to Your Mood Journey!
        </h3>
        <p className="text-gray-600 text-sm mb-6 max-w-md mx-auto">
          You're new to this! Your weekly summary will be generated by the end
          of this week.
        </p>
      </div>
    );
  }

  // Only last week data
  if (summary.thisWeek.length === 0 && summary.lastWeek.length > 0) {
    return (
      <div className="space-y-6">
        <div className="text-center">
          <h3 className="text-xl font-bold text-gray-800 mb-2">
            üìä Last Week's Mood Summary
          </h3>
          <p className="text-gray-600 text-sm">
            Your most recent completed week
          </p>
        </div>

        <div className="space-y-3">
          {summary.lastWeek
            .sort((a, b) => b.percentage - a.percentage)
            .map((mood) => (
              <div
                key={mood.mood}
                className={`p-4 rounded-xl border ${
                  moodBgMap[mood.mood]
                } transition-all hover:shadow-sm`}
              >
                <div className="flex items-start gap-3">
                  <span className="text-2xl">{moodEmojiMap[mood.mood]}</span>
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center justify-between mb-2">
                      <span
                        className={`capitalize font-semibold ${
                          moodColorMap[mood.mood]
                        }`}
                      >
                        {mood.mood}
                      </span>
                      <span className="text-sm font-bold text-gray-700 bg-white px-2 py-1 rounded-full">
                        {mood.percentage}%
                      </span>
                    </div>
                    {mood.reason && (
                      <p className="text-sm text-gray-600 italic bg-white/70 p-2 rounded-lg">
                        "{mood.reason}"
                      </p>
                    )}
                  </div>
                </div>
              </div>
            ))}
        </div>
      </div>
    );
  }

  // Only this week data
  if (summary.lastWeek.length === 0 && summary.thisWeek.length > 0) {
    const isCurrentWeek = new Date().getDay() === 0;
    const weekLabel = isCurrentWeek ? "This Week" : "Most Recent Week";

    return (
      <div className="space-y-6">
        <div className="text-center">
          <h3 className="text-xl font-bold text-gray-800 mb-2">
            üìä {weekLabel} Mood Summary
          </h3>
          <p className="text-gray-600 text-sm">Your current mood breakdown</p>
        </div>

        <div className="space-y-3">
          {summary.thisWeek
            .sort((a, b) => b.percentage - a.percentage)
            .map((mood) => (
              <div
                key={mood.mood}
                className={`p-4 rounded-xl border ${
                  moodBgMap[mood.mood]
                } transition-all hover:shadow-sm`}
              >
                <div className="flex items-start gap-3">
                  <span className="text-2xl">{moodEmojiMap[mood.mood]}</span>
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center justify-between mb-2">
                      <span
                        className={`capitalize font-semibold ${
                          moodColorMap[mood.mood]
                        }`}
                      >
                        {mood.mood}
                      </span>
                      <span className="text-sm font-bold text-gray-700 bg-white px-2 py-1 rounded-full">
                        {mood.percentage}%
                      </span>
                    </div>
                    {mood.reason && (
                      <p className="text-sm text-gray-600 italic bg-white/70 p-2 rounded-lg">
                        "{mood.reason}"
                      </p>
                    )}
                  </div>
                </div>
              </div>
            ))}
        </div>
      </div>
    );
  }

  // Full comparison (both weeks have data)
  const insights = getComparisonInsights();

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="text-center">
        <h3 className="text-xl font-bold text-gray-800 mb-2">
          üìä Weekly Mood Comparison
        </h3>
        <p className="text-gray-600 text-sm">
          See how your mood patterns changed
        </p>
      </div>

      {/* Comparison Insights */}
      {insights.length > 0 ? (
        <div className="space-y-4">
          <h4 className="font-semibold text-gray-800 text-lg mb-3">
            üîç What Changed This Week
          </h4>

          <div className="space-y-3">
            {insights.map((insight) => (
              <div
                key={insight.mood}
                className={`p-4 rounded-xl border transition-all hover:shadow-sm ${
                  insight.isPositive
                    ? "bg-emerald-50 border-emerald-200"
                    : "bg-rose-50 border-rose-200"
                }`}
              >
                <div className="flex items-start gap-3">
                  <span className="text-2xl">{moodEmojiMap[insight.mood]}</span>
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center justify-between mb-2">
                      <span
                        className={`capitalize font-semibold ${
                          moodColorMap[insight.mood]
                        }`}
                      >
                        {insight.mood}
                      </span>
                      <span
                        className={`text-sm font-bold px-2 py-1 rounded-full ${
                          insight.isPositive
                            ? "bg-emerald-100 text-emerald-700"
                            : "bg-rose-100 text-rose-700"
                        }`}
                      >
                        {insight.direction === "increased" ? "+" : "-"}
                        {insight.change}%
                      </span>
                    </div>

                    <p className="text-sm text-gray-700 mb-2">
                      You were {insight.change}%{" "}
                      {insight.direction === "increased" ? "more" : "less"}{" "}
                      {insight.mood} than last week
                    </p>

                    {insight.reason && (
                      <p className="text-sm text-gray-600 italic bg-white/70 p-2 rounded-lg">
                        Main reason: "{insight.reason}"
                      </p>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      ) : (
        <div className="text-center py-6">
          <div className="text-4xl mb-3">üìà</div>
          <h4 className="text-lg font-semibold text-gray-800 mb-2">
            No Major Changes This Week
          </h4>
          <p className="text-gray-600 text-sm">
            Your mood patterns were similar to last week.
          </p>
        </div>
      )}

      {/* Motivational Message */}
      <div className="bg-gradient-to-r from-yellow-50 to-orange-50 rounded-xl p-4 border border-yellow-200">
        <div className="text-center">
          <h4 className="font-semibold text-gray-800 mb-2">üí´ Keep Going!</h4>
          <p className="text-sm text-gray-600">
            {insights.some((i) => i.isPositive)
              ? "You're making positive changes! Keep up the great work! üåü"
              : insights.length > 0
              ? "Every week brings new opportunities for growth! üå±"
              : "Consistency in your mood tracking shows great self-awareness! üí™"}
          </p>
        </div>
      </div>
    </div>
  );
}
